package net.dwarfguide.creature.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class GenerateId_Intention extends BaseIntention implements Intention {
  public GenerateId_Intention() {
  }

  public String getConcept() {
    return "net.dwarfguide.creature.structure.HasId";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Generate Unique Id";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    int maxId = 0;
    for (SNode neighbour : ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "net.dwarfguide.creature.structure.HasId"))) {
      if (SNodeOperations.getConceptDeclaration(neighbour) == SNodeOperations.getConceptDeclaration(node)) {
        if (node != neighbour) {
          maxId = Math.max(maxId, SPropertyOperations.getInteger(neighbour, "identifier"));
        }
      }
    }
    SPropertyOperations.set(node, "identifier", "" + ++maxId);
  }

  public String getLocationString() {
    return "net.dwarfguide.creature.intentions";
  }
}
