package net.dwarfguide.creature.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class PopulateRaceWithFileds_Intention extends BaseIntention implements Intention {
  public PopulateRaceWithFileds_Intention() {
  }

  public String getConcept() {
    return "net.dwarfguide.creature.structure.Race";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Populate with Attributes, Skills, Traits";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    ListSequence.fromList(SLinkOperations.getTargets(node, "attributeStatistic", true)).clear();
    for (SNode attr : ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "net.dwarfguide.creature.structure.Attribute")).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode it) {
        return SPropertyOperations.getInteger(it, "identifier");
      }
    }, false)) {
      SNode attributeStatistic = SConceptOperations.createNewNode("net.dwarfguide.creature.structure.AttributeStatistic", null);
      SLinkOperations.setTarget(attributeStatistic, "attr", SConceptOperations.createNewNode("net.dwarfguide.creature.structure.AttributeRef", null), true);

      SLinkOperations.setTarget(SLinkOperations.getTarget(attributeStatistic, "attr", true), "attribute", attr, false);

      SLinkOperations.setTarget(attributeStatistic, "min", SConceptOperations.createNewNode("net.dwarfguide.creature.structure.StatisticsField", null), true);
      SPropertyOperations.set(SLinkOperations.getTarget(attributeStatistic, "min", true), "statistic", "" + 0);

      SLinkOperations.setTarget(attributeStatistic, "max", SConceptOperations.createNewNode("net.dwarfguide.creature.structure.StatisticsField", null), true);
      SPropertyOperations.set(SLinkOperations.getTarget(attributeStatistic, "max", true), "statistic", "" + 5000);

      SLinkOperations.setTarget(attributeStatistic, "average", SConceptOperations.createNewNode("net.dwarfguide.creature.structure.StatisticsField", null), true);
      SPropertyOperations.set(SLinkOperations.getTarget(attributeStatistic, "average", true), "statistic", "" + 1500);

      ListSequence.fromList(SLinkOperations.getTargets(node, "attributeStatistic", true)).addElement(attributeStatistic);
    }
  }

  public String getLocationString() {
    return "net.dwarfguide.creature.intentions";
  }
}
