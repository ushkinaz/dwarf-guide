package net.dwarfguide.creature.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class ProfessionEnricment_MigrationScript extends BaseMigrationScript {
  public ProfessionEnricment_MigrationScript(IOperationContext operationContext) {
    super("Enrich Profession nodes in various ways");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Transform name to human readable form";
      }

      public String getAdditionalInfo() {
        return "Transform name to human readable form";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "net.dwarfguide.creature.structure.Profession";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode named = SNodeOperations.as(node, "net.dwarfguide.creature.structure.HasName");
        String oldName = SPropertyOperations.getString(named, "name").toLowerCase();
        String newName = "";
        for (String namePart : oldName.replaceAll("_", " ").split(" ")) {
          newName += StringUtils.substring(namePart, 0, 1).toUpperCase() + StringUtils.substring(namePart, 1) + " ";
        }
        SPropertyOperations.set(named, "name", newName.trim());
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Suggest skills for professions based on names";
      }

      public String getAdditionalInfo() {
        return "Suggest skills for professions based on names";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "net.dwarfguide.creature.structure.Profession";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return (SLinkOperations.getTarget(node, "skillRef", true) == null);
      }

      public void doUpdateInstanceNode(final SNode node) {
        SNode newSkill;
        // "Brewing" and "Brewer" only differ in last characters 
        newSkill = ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "net.dwarfguide.creature.structure.Skill")).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return StringUtils.substring(SPropertyOperations.getString(node, "name"), 0, -2).toLowerCase().equals(StringUtils.substring(SPropertyOperations.getString(it, "name"), 0, -3).toLowerCase());
          }
        });
        if ((newSkill != null)) {
          SLinkOperations.setTarget(node, "skillRef", SConceptOperations.createNewNode("net.dwarfguide.creature.structure.SkillRef", null), true);
          SLinkOperations.setTarget(SLinkOperations.getTarget(node, "skillRef", true), "skill", newSkill, false);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
