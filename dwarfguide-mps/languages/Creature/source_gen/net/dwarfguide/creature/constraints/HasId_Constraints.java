package net.dwarfguide.creature.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class HasId_Constraints extends BaseConstraintsDescriptor {
  public HasId_Constraints() {
    super("net.dwarfguide.creature.structure.HasId");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("identifier", new BasePropertyConstraintsDescriptor("identifier", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "identifier";
        // Somewhat dumb check. If model already has children with same id and concept - prohibit this ID. 
        // This should/might be overriden for more specifics in derived concepts 
        for (SNode neighbour : ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "net.dwarfguide.creature.structure.HasId"))) {
          if (SNodeOperations.getConceptDeclaration(neighbour) == SNodeOperations.getConceptDeclaration(node)) {
            if (node != neighbour && (SPropertyOperations.getInteger(propertyValue)) == SPropertyOperations.getInteger(neighbour, "identifier")) {
              return false;
            }
          }
        }
        return (SPropertyOperations.getInteger(propertyValue)) >= 0;
      }
    });
    return properties;
  }
}
