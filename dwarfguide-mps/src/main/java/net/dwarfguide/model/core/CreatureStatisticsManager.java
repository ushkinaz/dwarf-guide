package net.dwarfguide.model.core;

/*Generated by MPS */

import java.util.Map;
import java.util.EnumMap;

public class CreatureStatisticsManager {
  private Map<RaceEnum, Map<AttributeEnum, StatisticsTuple>> statistics;

  public CreatureStatisticsManager() {
    statistics = new EnumMap<RaceEnum, Map<AttributeEnum, StatisticsTuple>>(RaceEnum.class);

    Map<AttributeEnum, StatisticsTuple> stats;

    // Statistics for dwarf 
    stats = new EnumMap<AttributeEnum, StatisticsTuple>(AttributeEnum.class);
    stats.put(AttributeEnum.STRENGTH, new StatisticsTuple(0, 5000, 1250));
    stats.put(AttributeEnum.AGILITY, new StatisticsTuple(0, 5000, 900));
    stats.put(AttributeEnum.TOUGHNESS, new StatisticsTuple(0, 5000, 1250));
    stats.put(AttributeEnum.ENDURANCE, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.DISEASERESISTANCE, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.RECUPERATION, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.ANALYTICALABILITY, new StatisticsTuple(0, 5000, 1250));
    stats.put(AttributeEnum.MEMORY, new StatisticsTuple(0, 5000, 1250));
    stats.put(AttributeEnum.CREATVITY, new StatisticsTuple(0, 5000, 1250));
    stats.put(AttributeEnum.INTUITION, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.FOCUS, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.WILLPOWER, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.PATIENCE, new StatisticsTuple(0, 5000, 1250));
    stats.put(AttributeEnum.SPATIALSENSE, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.KINAESTHETICSENSE, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.LINGUISTICABILITY, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.MUSICALITY, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.EMPATHY, new StatisticsTuple(0, 5000, 1000));
    stats.put(AttributeEnum.SOCIALAWARENESS, new StatisticsTuple(0, 5000, 1000));
    statistics.put(RaceEnum.DWARF, stats);

    // Statistics for goblin 
    stats = new EnumMap<AttributeEnum, StatisticsTuple>(AttributeEnum.class);
    stats.put(AttributeEnum.FOCUS, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.KINAESTHETICSENSE, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.SPATIALSENSE, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.LINGUISTICABILITY, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.ANALYTICALABILITY, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.MUSICALITY, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.CREATVITY, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.SOCIALAWARENESS, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.EMPATHY, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.PATIENCE, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.INTUITION, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.MEMORY, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.WILLPOWER, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.DISEASERESISTANCE, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.RECUPERATION, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.TOUGHNESS, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.STRENGTH, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.ENDURANCE, new StatisticsTuple(0, 5000, 1500));
    stats.put(AttributeEnum.AGILITY, new StatisticsTuple(0, 5000, 1500));
    statistics.put(RaceEnum.GOBLIN, stats);

  }

  public StatisticsTuple getStats(RaceEnum race, AttributeEnum attr) {
    return statistics.get(race).get(attr);
  }

  /**
   * Normalize value to fit [0..max] range
   * 
   * @param value value
   * @param max maximum
   * @param race race
   * @param attr attribute
   * @return normalized value
   */
  public int normalize(int value, int max, RaceEnum race, AttributeEnum attr) {
    StatisticsTuple stat = getStats(race, attr);
    return max * (value - (int) stat.min()) / ((int) stat.max() - (int) stat.min());
  }
}
