package net.dwarfguide.model.core;

/*Generated by MPS */

import com.google.inject.Provider;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.InputStream;
import org.simpleframework.xml.stream.Format;
import org.simpleframework.xml.stream.CamelCaseStyle;
import org.simpleframework.xml.strategy.Strategy;
import org.simpleframework.xml.convert.AnnotationStrategy;
import org.simpleframework.xml.transform.RegistryMatcher;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;


/**
 * * @author Dmitry Sidorenko
 */
public class RunesmithXMLReader implements Provider<Creatures> {
  protected static Log log = LogFactory.getLog(RunesmithXMLReader.class);

  private String myXmlFile;

  public RunesmithXMLReader(String xmlFile) {
    this.setXmlFile(xmlFile);
  }

  @Override
  public Creatures get() {
    try {
      return deserialize(FileUtils.openInputStream(new File(this.getXmlFile())));
    } catch (Exception exception) {
      if (log.isErrorEnabled()) {
        log.error("Error deserializing", exception);
      }
      return new Creatures();
    }
  }

  public Creatures deserialize(InputStream in) throws Exception {
    Format format = new Format(new CamelCaseStyle(true));
    Strategy strategy = new AnnotationStrategy();
    RegistryMatcher matcher = new RegistryMatcher();
    registerEnumTransform(matcher, Sex.class);
    registerEnumTransform(matcher, ProfessionEnum.class);
    registerEnumTransform(matcher, TraitEnum.class);

    Serializer serializer = new Persister(strategy, matcher, format);
    return serializer.read(Creatures.class, in);
  }

  public void registerEnumTransform(RegistryMatcher matcher, Class enumClass) {
    // Need direct typecast due to MPS stupidity 
    matcher.bind(enumClass, new RunesmithXMLReader.EnumTransform(enumClass));
  }

  public String getXmlFile() {
    return this.myXmlFile;
  }

  private void setXmlFile(String value) {
    this.myXmlFile = value;
  }

  private static class EnumTransform<EnumType extends Enum<EnumType>> extends ReadonlyTransform<EnumType> {
    private Class<EnumType> typeClass;

    @SuppressWarnings(value = {"UnusedDeclaration"})
    private EnumTransform(Class<EnumType> typeClass) {
      this.typeClass = typeClass;
    }

    @Override
    public EnumType read(String value) throws Exception {
      return Enum.valueOf(typeClass, value.toUpperCase());
    }
  }
}
