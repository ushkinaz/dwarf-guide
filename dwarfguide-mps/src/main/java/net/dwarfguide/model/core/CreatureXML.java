package net.dwarfguide.model.core;

/*Generated by MPS */

import org.simpleframework.xml.Root;
import org.simpleframework.xml.Element;
import org.simpleframework.xml.Path;
import org.simpleframework.xml.ElementList;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;


/**
 * * @author Dmitry Sidorenko
 */
@Root(name = "Creature", strict = false)
public class CreatureXML {
  @Element
  private String name;
  @Element(required = false)
  private String nickname;
  @Element(required = false)
  private String customProfession = "";
  @Element
  private Sex sex;
  @Element
  private int age;
  @Element
  private RaceEnum race;
  @Element(name = "Profession")
  private ProfessionEnum profession;
  @Path(value = "Attributes")
  @Element(name = "Recuperation")
  private int Recuperation;
  @Path(value = "Attributes")
  @Element(name = "DiseaseResistance")
  private int DiseaseResistance;
  @Path(value = "Attributes")
  @Element(name = "Willpower")
  private int Willpower;
  @Path(value = "Attributes")
  @Element(name = "Memory")
  private int Memory;
  @Path(value = "Attributes")
  @Element(name = "Focus")
  private int Focus;
  @Path(value = "Attributes")
  @Element(name = "Intuition")
  private int Intuition;
  @Path(value = "Attributes")
  @Element(name = "Patience")
  private int Patience;
  @Path(value = "Attributes")
  @Element(name = "Empathy")
  private int Empathy;
  @Path(value = "Attributes")
  @Element(name = "SocialAwareness")
  private int SocialAwareness;
  @Path(value = "Attributes")
  @Element(name = "Creatvity")
  private int Creatvity;
  @Path(value = "Attributes")
  @Element(name = "Musicality")
  private int Musicality;
  @Path(value = "Attributes")
  @Element(name = "LinguisticAbility")
  private int LinguisticAbility;
  @Path(value = "Attributes")
  @Element(name = "SpatialSense")
  private int SpatialSense;
  @Path(value = "Attributes")
  @Element(name = "KinaestheticSense")
  private int KinaestheticSense;
  @Path(value = "Attributes")
  @Element(name = "AnalyticalAbility")
  private int AnalyticalAbility;
  @Path(value = "Attributes")
  @Element(name = "Strength")
  private int Strength;
  @Path(value = "Attributes")
  @Element(name = "Agility")
  private int Agility;
  @Path(value = "Attributes")
  @Element(name = "Toughness")
  private int Toughness;
  @Path(value = "Attributes")
  @Element(name = "Endurance")
  private int Endurance;
  @ElementList(entry = "Skill", empty = false)
  private List<SkillXMLInstance> skills;
  @ElementList(entry = "Traits", empty = false)
  private List<TraitInstance> traits;

  public CreatureXML() {
  }

  public String getName() {
    return name;
  }

  public String getNickname() {
    return nickname;
  }

  public String getCustomProfession() {
    return customProfession;
  }

  public Sex getSex() {
    return sex;
  }

  public int getAge() {
    return age;
  }

  public Creature toCreature() {
    Creature cr = new Creature();
    cr.setName(this.name);
    cr.setNickname(this.nickname);
    cr.setRace(this.race);
    fillAttributes(cr);
    fillSkills(cr);
    fillTraits(cr);
    return cr;
  }

  private void fillAttributes(Creature creature) {
    creature.setAttribute(AttributeEnum.RECUPERATION, Recuperation);
    creature.setAttribute(AttributeEnum.DISEASERESISTANCE, DiseaseResistance);
    creature.setAttribute(AttributeEnum.WILLPOWER, Willpower);
    creature.setAttribute(AttributeEnum.MEMORY, Memory);
    creature.setAttribute(AttributeEnum.FOCUS, Focus);
    creature.setAttribute(AttributeEnum.INTUITION, Intuition);
    creature.setAttribute(AttributeEnum.PATIENCE, Patience);
    creature.setAttribute(AttributeEnum.EMPATHY, Empathy);
    creature.setAttribute(AttributeEnum.SOCIALAWARENESS, SocialAwareness);
    creature.setAttribute(AttributeEnum.CREATVITY, Creatvity);
    creature.setAttribute(AttributeEnum.MUSICALITY, Musicality);
    creature.setAttribute(AttributeEnum.LINGUISTICABILITY, LinguisticAbility);
    creature.setAttribute(AttributeEnum.SPATIALSENSE, SpatialSense);
    creature.setAttribute(AttributeEnum.KINAESTHETICSENSE, KinaestheticSense);
    creature.setAttribute(AttributeEnum.ANALYTICALABILITY, AnalyticalAbility);
    creature.setAttribute(AttributeEnum.STRENGTH, Strength);
    creature.setAttribute(AttributeEnum.AGILITY, Agility);
    creature.setAttribute(AttributeEnum.TOUGHNESS, Toughness);
    creature.setAttribute(AttributeEnum.ENDURANCE, Endurance);
  }

  private void fillTraits(Creature creature) {
    // TODO: optimize some day 
    TraitInstance traitInst;

    traitInst = findTrait(TraitEnum.NERVOUSNESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.NERVOUSNESS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.RAGE);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.RAGE, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.DEPRESSION);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.DEPRESSION, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.NEUROSIS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.NEUROSIS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.URGE);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.URGE, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.STRESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.STRESS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.FRIENDLY);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.FRIENDLY, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.COMPANY);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.COMPANY, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.LEADERSHIP);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.LEADERSHIP, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.ACTIVENESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.ACTIVENESS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.THRILLSEEKING);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.THRILLSEEKING, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.OPTIMISM);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.OPTIMISM, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.IMAGINATION);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.IMAGINATION, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.ARTISTIC);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.ARTISTIC, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.EMOTION);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.EMOTION, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.ADVENTURE);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.ADVENTURE, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.THINKING);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.THINKING, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.REBELLIOUSNESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.REBELLIOUSNESS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.TRUSTING);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.TRUSTING, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.HONESTY);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.HONESTY, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.HELPFULNESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.HELPFULNESS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.COMPROMISING);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.COMPROMISING, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.MODESTY);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.MODESTY, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.COMPASSION);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.COMPASSION, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.CONFIDENCE);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.CONFIDENCE, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.ORGANIZATION);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.ORGANIZATION, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.LAWFULNESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.LAWFULNESS, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.EXCELLENCE);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.EXCELLENCE, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.PERSEVERANCE);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.PERSEVERANCE, (int) traitInst.experience());
    }
    traitInst = findTrait(TraitEnum.CAUTIOUSNESS);
    if (traitInst != null) {
      creature.setTrait(TraitEnum.CAUTIOUSNESS, (int) traitInst.experience());
    }
  }

  public TraitInstance findTrait(final TraitEnum traitEnum) {
    return ListSequence.fromList(traits).findFirst(new IWhereFilter<TraitInstance>() {
      public boolean accept(TraitInstance it) {
        return it.trait() == traitEnum;
      }
    });
  }

  private void fillSkills(Creature creature) {
    // TODO: optimize some day 
    SkillXMLInstance skillXMLInstance;
    skillXMLInstance = findSkill(SkillEnum.MINING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MINING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WOOD_CUTTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WOOD_CUTTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CARPENTRY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CARPENTRY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ENGRAVING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ENGRAVING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.MASONRY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MASONRY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ANIMAL_TRAINING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ANIMAL_TRAINING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ANIMAL_CARETAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ANIMAL_CARETAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.FISH_DISSECTION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.FISH_DISSECTION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ANIMAL_DISSECTION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ANIMAL_DISSECTION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.FISH_CLEANING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.FISH_CLEANING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BUTCHERY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BUTCHERY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.TRAPPING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.TRAPPING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.TANNING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.TANNING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WEAVING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WEAVING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BREWING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BREWING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ALCHEMY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ALCHEMY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CLOTHES_MAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CLOTHES_MAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.MILLING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MILLING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.THRESHING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.THRESHING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CHEESE_MAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CHEESE_MAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.MILKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MILKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.COOKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.COOKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.GROWING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.GROWING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.HERBALISM);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.HERBALISM, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.FISHING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.FISHING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.FURNACE_OPERATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.FURNACE_OPERATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.STRAND_EXTRACTION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.STRAND_EXTRACTION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WEAPONSMITHING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WEAPONSMITHING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ARMORSMITHING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ARMORSMITHING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.METALSMITHING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.METALSMITHING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.GEM_CUTTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.GEM_CUTTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.GEM_SETTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.GEM_SETTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WOOD_CRAFTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WOOD_CRAFTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.STONE_CRAFTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.STONE_CRAFTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.METAL_CRAFTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.METAL_CRAFTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.GLASSMAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.GLASSMAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.LEATHERWORKERING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.LEATHERWORKERING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BONE_CARVING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BONE_CARVING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.AXE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.AXE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SWORD);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SWORD, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.KNIFE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.KNIFE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.MACE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MACE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.HAMMER);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.HAMMER, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SPEAR);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SPEAR, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CROSSBOW);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CROSSBOW, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SHIELD);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SHIELD, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ARMOR);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ARMOR, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SIEGE_ENGINEERING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SIEGE_ENGINEERING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SIEGE_OPERATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SIEGE_OPERATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BOWMAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BOWMAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.PIKE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.PIKE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.LASH);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.LASH, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BOW);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BOW, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BLOWGUN);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BLOWGUN, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.THROWING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.THROWING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.MACHINERY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MACHINERY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.NATURE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.NATURE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.AMBUSH);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.AMBUSH, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BUILDING_DESIGN);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BUILDING_DESIGN, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WOUND_DRESSING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WOUND_DRESSING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.DIAGNOSTICS);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.DIAGNOSTICS, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SURGERY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SURGERY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BONE_SETTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BONE_SETTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SUTURING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SUTURING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CRUTCH_WALKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CRUTCH_WALKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WOOD_BURNING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WOOD_BURNING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.LYE_MAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.LYE_MAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SOAP_MAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SOAP_MAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.POTASH_MAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.POTASH_MAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.DYEING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.DYEING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.PUMP_OPERATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.PUMP_OPERATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SWIMMING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SWIMMING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.PERSUASION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.PERSUASION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.NEGOTIATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.NEGOTIATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.JUDGING_INTENT);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.JUDGING_INTENT, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.APPRAISAL);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.APPRAISAL, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ORGANIZATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ORGANIZATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.RECORD_KEEPING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.RECORD_KEEPING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.LYING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.LYING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.INTIMIDATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.INTIMIDATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CONVERSATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CONVERSATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.COMEDY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.COMEDY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.FLATTERY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.FLATTERY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CONSOLING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CONSOLING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.PACIFICATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.PACIFICATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.TRACKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.TRACKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.STUDYING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.STUDYING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.CONCENTRATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.CONCENTRATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.DISCIPLINE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.DISCIPLINE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.OBSERVATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.OBSERVATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WRITING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WRITING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.PROSE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.PROSE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.POETRY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.POETRY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.READING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.READING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SPEAKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SPEAKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.COORDINATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.COORDINATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BALANCE);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BALANCE, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.LEADERSHIP);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.LEADERSHIP, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.TEACHING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.TEACHING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.FIGHTING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.FIGHTING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.ARCHERY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.ARCHERY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WRESTLING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WRESTLING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BITING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BITING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.STRIKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.STRIKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.KICKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.KICKING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.DODGING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.DODGING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.MISC__OBJECT);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.MISC__OBJECT, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.KNAPPING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.KNAPPING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SOMETHING_WEIRD);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SOMETHING_WEIRD, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.SHEARING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.SHEARING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WOOL_SPINNING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WOOL_SPINNING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.POTTERY);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.POTTERY, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.GLAZING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.GLAZING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.PRESS_OPERATION);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.PRESS_OPERATION, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.BEE_KEEPING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.BEE_KEEPING, skillXMLInstance.getExperience());
    }
    skillXMLInstance = findSkill(SkillEnum.WAX_WORKING);
    if (skillXMLInstance != null) {
      creature.setSkill(SkillEnum.WAX_WORKING, skillXMLInstance.getExperience());
    }
  }

  public SkillXMLInstance findSkill(final SkillEnum skillEnum) {
    return ListSequence.fromList(skills).findFirst(new IWhereFilter<SkillXMLInstance>() {
      public boolean accept(SkillXMLInstance it) {
        return it.getSkill() == skillEnum;
      }
    });
  }
}
