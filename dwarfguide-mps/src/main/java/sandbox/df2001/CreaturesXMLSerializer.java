package sandbox.df2001;

/*Generated by MPS */

import com.google.inject.Provider;
import java.io.InputStream;
import org.simpleframework.xml.stream.Format;
import org.simpleframework.xml.stream.CamelCaseStyle;
import org.simpleframework.xml.strategy.Strategy;
import org.simpleframework.xml.convert.AnnotationStrategy;
import org.simpleframework.xml.transform.RegistryMatcher;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;
import net.dwarfguide.ReadonlyTransform;


/**
 * * @author Dmitry Sidorenko
 */
public class CreaturesXMLSerializer implements Provider<Creatures> {
  private String myXmlFile;

  public CreaturesXMLSerializer(String xmlFile) {
    this.setXmlFile(xmlFile);
  }

  @Override
  public Creatures get() {
    try {
      return deserialize(getClass().getClassLoader().getResourceAsStream(this.getXmlFile()));
    } catch (Exception exception) {
      return new Creatures();
    }
  }

  public Creatures deserialize(InputStream in) throws Exception {
    Format format = new Format(new CamelCaseStyle(true));
    Strategy strategy = new AnnotationStrategy();
    RegistryMatcher matcher = new RegistryMatcher();
    Serializer serializer = new Persister(strategy, matcher, format);
    return serializer.read(Creatures.class, in);
  }

  public String getXmlFile() {
    return this.myXmlFile;
  }

  private void setXmlFile(String value) {
    this.myXmlFile = value;
  }

  private static class EnumTransform<EnumType extends Enum<EnumType>> extends ReadonlyTransform<EnumType> {
    private Class<EnumType> typeClass;

    private EnumTransform(Class<EnumType> typeClass) {
      this.typeClass = typeClass;
    }

    @Override
    public EnumType read(String value) throws Exception {
      return Enum.valueOf(typeClass, value.toUpperCase());
    }
  }
}
